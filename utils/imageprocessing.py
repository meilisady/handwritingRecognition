# -*- coding: utf-8 -*-
"""imageProcessing.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1BY-bMHCYtKYa-73oF-7FyX_X83hkL_UT
"""

import numpy as np
import matplotlib.pyplot as plt
import cv2
import math
from collections import OrderedDict

def deskew(img):
    try:
        thresh = img
        edges = cv2.Canny(thresh, 50, 200, apertureSize=3)
        lines = cv2.HoughLines(edges, 1, np.pi / 1000, 55)

        d1 = OrderedDict()
        for line in lines:
            for rho, theta in line:
                deg = np.rad2deg(theta)
                d1[deg] = d1.get(deg, 0) + 1

        t1 = OrderedDict(sorted(d1.items(), key=lambda x: x[1]))
        angle = list(t1.keys())[0]
        print(f"Detected angle: {angle} for shape {thresh.shape}")

        non_zero_pixels = cv2.findNonZero(thresh)
        center, _, _ = cv2.minAreaRect(non_zero_pixels)

        if angle > 160:
            angle = 180 - angle
        elif 20 < angle < 160:
            angle = 12

        rot_mat = cv2.getRotationMatrix2D(center, angle, 1)
        rotated = cv2.warpAffine(img, rot_mat, (img.shape[1], img.shape[0]), flags=cv2.INTER_CUBIC)
        return rotated
    except Exception as e:
        print("Deskew error:", e)
        return img


def unshear(img):
    gray = img.copy()
    thresh = gray.copy()

    trans = thresh.T
    arr = [np.sum(row) for row in thresh]
    y = thresh.shape[0] - 1 - np.nonzero(arr)[0][0]
    y_top = thresh.shape[0] - 1 - np.nonzero(arr)[0][-1]

    trans1 = thresh.T
    sum1 = [np.sum(col) for col in trans1]

    height = y - y_top
    max_value = 255 * height
    prev_num = len([i for i in sum1 if i >= (0.6 * max_value)])
    final_ang = 0

    for ang in range(-25, 25, 3):
        sheared = gray.copy()
        for i in range(y):
            temp = sheared[i]
            move = int((y - i) * math.tan(math.radians(abs(ang))))
            move = min(move, temp.size)

            if ang > 0:
                sheared[i][:temp.size - move] = temp[move:]
                sheared[i][temp.size - move:] = 0
            else:
                sheared[i][move:] = temp[:temp.size - move]
                sheared[i][:move] = 0

        trans1 = sheared.T
        sum1 = [np.sum(col) for col in trans1]
        num = len([i for i in sum1 if i >= (0.6 * max_value)])
        if num >= prev_num:
            prev_num = num
            final_ang = ang

    # Apply final angle
    corrected = gray.copy()
    for i in range(y):
        temp = corrected[i]
        move = int((y - i) * math.tan(math.radians(abs(final_ang))))
        move = min(move, temp.size)
        if final_ang > 0:
            corrected[i][:temp.size - move] = temp[move:]
            corrected[i][temp.size - move:] = 0
        else:
            corrected[i][move:] = temp[:temp.size - move]
            corrected[i][:move] = 0

    return corrected


def pad_with(vector, pad_width, iaxis, kwargs):
    pad_value = kwargs.get('padder', 40)
    vector[:pad_width[0]] = pad_value
    vector[-pad_width[1]:] = pad_value
    return vector


# ========== MAIN ==========
if __name__ == '__main__':
    path = '/content/drive/MyDrive/CV/sample_images/c.png'
    img = cv2.imread(path, 0)

    if img is None:
        raise FileNotFoundError(f"Failed to load image from {path}")

    ret, thresh = cv2.threshold(img, 127, 255, cv2.THRESH_BINARY)

    # Pad and ensure dtype is correct
    padded = np.pad(thresh, 100, pad_with, padder=0)
    padded = np.array(padded, dtype=np.uint8)

    # Show original + padded
    plt.imshow(padded, cmap='gray')
    plt.title("Padded Image")
    plt.axis('off')
    plt.show()

    # Deskew and unshear
    deskewed = deskew(padded)
    sheared_img = unshear(deskewed)

    # Final thresholding
    ret, final = cv2.threshold(sheared_img, 0, 255, cv2.THRESH_BINARY_INV + cv2.THRESH_OTSU)

    plt.imshow(final, cmap='gray')
    plt.title("Final Preprocessed Image")
    plt.axis('off')
    plt.show()

    cv2.imwrite('/content/drive/MyDrive/CV/result/data/c.png', final)

else:
    print("shear code: 2.34")